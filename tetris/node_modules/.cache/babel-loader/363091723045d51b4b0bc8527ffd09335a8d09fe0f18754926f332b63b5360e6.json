{"ast":null,"code":"var _jsxFileName = \"/Users/Pajamas/Project/tetris/src/components/Board.js\";\nimport { useState, useRef } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\nimport Preview from \"./Preview\";\nimport GameStats from \"./GameStats\";\nimport { useQueue } from \"../hooks/useQueue\";\nimport { useGetBlock } from \"../hooks/useGetBlock\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  // const initGrid = Array.from({ length: 20 }, () => new Array(10).fill(0));\n  // const [grid, setGrid] = useState(initGrid);\n\n  // // if(!isStart) return; //count down check\n  // //아래의 level, line, score는 redux를 사용하는 편이 좋아보임\n  // const [level, setLevel] = useState(1);\n  // const [line, setLine] = useState(0);\n  // const [score, setScore] = useState(0);\n\n  // let shape = useRef(null); //현재 조종중인 블럭\n  // const previewShape = useRef(null); //다음 블럭\n  // const [blockQueue, setBlockQueue, pop] = useQueue();\n  // const [newGrid, color] = useGetBlock(shape, grid, setGrid);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useRef","Cell","Preview","GameStats","useQueue","useGetBlock","jsxDEV","_jsxDEV","Board","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/Pajamas/Project/tetris/src/components/Board.js"],"sourcesContent":["import { useState, useRef } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\n\nimport Preview from \"./Preview\";\nimport GameStats from \"./GameStats\";\nimport { useQueue } from \"../hooks/useQueue\";\nimport { useGetBlock } from \"../hooks/useGetBlock\";\n\n\n\nconst Board = () => {\n    // const initGrid = Array.from({ length: 20 }, () => new Array(10).fill(0));\n    // const [grid, setGrid] = useState(initGrid);\n\n    // // if(!isStart) return; //count down check\n    // //아래의 level, line, score는 redux를 사용하는 편이 좋아보임\n    // const [level, setLevel] = useState(1);\n    // const [line, setLine] = useState(0);\n    // const [score, setScore] = useState(0);\n\n    \n    // let shape = useRef(null); //현재 조종중인 블럭\n    // const previewShape = useRef(null); //다음 블럭\n    // const [blockQueue, setBlockQueue, pop] = useQueue();\n    // const [newGrid, color] = useGetBlock(shape, grid, setGrid);\n    \n\n\n\n\n\n\n    return(\n        <div className=\"board\">\n            \n            {/* <h1 className=\"board-title-tetris\">TETRIS</h1>\n            \n            <div className=\"grid\">\n                {grid.map((row, rowIndex) => row.map((col, colIndex) => {\n                    return <Cell \n                        key={`${rowIndex}, ${colIndex}`}\n                        color={grid[rowIndex][colIndex] === 1 ? color : 'black'}\n                    />\n                }))}\n                <Preview shape={previewShape.current}/>\n            </div>\n            \n            \n            <GameStats \n                level={level}\n                line={line}\n                score={score}\n            /> */}\n\n        </div>\n    );\n}\nexport default Board;"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,kBAAkB;AAEzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,SAAS,MAAM,aAAa;AACnC,SAASC,QAAQ,QAAQ,mBAAmB;AAC5C,SAASC,WAAW,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAInD,MAAMC,KAAK,GAAGA,CAAA,KAAM;EAChB;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAGA;EACA;EACA;EACA;;EAQA,oBACID,OAAA;IAAKE,SAAS,EAAC;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAqBjB,CAAC;AAEd,CAAC;AAAAC,EAAA,GA9CKN,KAAK;AA+CX,eAAeA,KAAK;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}