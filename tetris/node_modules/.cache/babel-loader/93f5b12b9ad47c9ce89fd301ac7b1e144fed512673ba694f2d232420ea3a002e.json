{"ast":null,"code":"var _jsxFileName = \"/Users/Pajamas/Project/tetris/src/components/Tetris/Preview.js\";\nimport { styled } from \"styled-components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Preview = () => {\n  return /*#__PURE__*/_jsxDEV(StyledPreview, {\n    children: \"P\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n};\n_c = Preview;\nexport default Preview;\nconst StyledPreview = styled.div`\n    width: 100px;\n    height: 100px;\n`;\n\n// import { useState } from \"react\";\n// import Cell from \"./Cell\";\n\n// const Preview = () => {\n//     const initGrid = Array.from({ length: 4 }, () => new Array(4).fill(0));\n//     const [grid, setGrid] = useState(initGrid);\n//     return(\n//         <div className=\"preview\">\n//             {grid.map((row, rowIndex) => row.map((col, colIndex) => {\n//                 return <Cell \n//                     key={`${rowIndex}, ${colIndex}`}\n//                     color={grid[rowIndex][colIndex] === 1 ? 'black' : 'rgb(116, 130, 95)'}\n//                 />\n//             }))}\n//         </div>\n//     );\n// }\n// export default Preview;\n_c2 = StyledPreview;\nvar _c, _c2;\n$RefreshReg$(_c, \"Preview\");\n$RefreshReg$(_c2, \"StyledPreview\");","map":{"version":3,"names":["styled","jsxDEV","_jsxDEV","Preview","StyledPreview","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","div","_c2","$RefreshReg$"],"sources":["/Users/Pajamas/Project/tetris/src/components/Tetris/Preview.js"],"sourcesContent":["import { styled } from \"styled-components\";\n\nconst Preview = () => {\n    return(\n        <StyledPreview>\n            P\n        </StyledPreview>\n    );\n}\n\nexport default Preview;\n\nconst StyledPreview = styled.div`\n    width: 100px;\n    height: 100px;\n`\n\n// import { useState } from \"react\";\n// import Cell from \"./Cell\";\n\n// const Preview = () => {\n//     const initGrid = Array.from({ length: 4 }, () => new Array(4).fill(0));\n//     const [grid, setGrid] = useState(initGrid);\n//     return(\n//         <div className=\"preview\">\n//             {grid.map((row, rowIndex) => row.map((col, colIndex) => {\n//                 return <Cell \n//                     key={`${rowIndex}, ${colIndex}`}\n//                     color={grid[rowIndex][colIndex] === 1 ? 'black' : 'rgb(116, 130, 95)'}\n//                 />\n//             }))}\n//         </div>\n//     );\n// }\n// export default Preview;"],"mappings":";AAAA,SAASA,MAAM,QAAQ,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAClB,oBACID,OAAA,CAACE,aAAa;IAAAC,QAAA,EAAC;EAEf;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAe,CAAC;AAExB,CAAC;AAAAC,EAAA,GANKP,OAAO;AAQb,eAAeA,OAAO;AAEtB,MAAMC,aAAa,GAAGJ,MAAM,CAACW,GAAI;AACjC;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,GAAA,GAtBMR,aAAa;AAAA,IAAAM,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}