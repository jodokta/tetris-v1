{"ast":null,"code":"var _jsxFileName = \"/Users/Pajamas/Project/tetris/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\nimport { useSelector } from \"react-redux\";\nimport Preview from \"./Preview\";\nimport GameStats from \"./GameStats\";\nimport { useQueue } from \"../hooks/useQueue\";\nimport { useGetBlock } from \"../hooks/useGetBlock\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const initGrid = Array.from({\n    length: 20\n  }, () => new Array(10).fill(0));\n  const [grid, setGrid] = useState(initGrid);\n  const isStart = useSelector(store => store.isStart.value);\n  // if(!isStart) return; //count down check\n  //아래의 level, line, score는 redux를 사용하는 편이 좋아보임\n  const [level, setLevel] = useState(1);\n  const [line, setLine] = useState(0);\n  const [score, setScore] = useState(0);\n\n  //block queue state\n  const [blockQueue, setBlockQueue, pop] = useQueue();\n  let shape = useRef(null); //현재 조종중인 블럭\n  const previewShape = blockQueue[blockQueue.length - 1];\n  useEffect(() => {\n    if (!isStart) return; //count down check\n    console.log('ddd');\n    shape.current = pop();\n  }, [isStart, blockQueue]);\n  const [newGrid, color] = useGetBlock(shape, grid, setGrid);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"board-title-tetris\",\n      children: \"TETRIS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: [grid.map((row, rowIndex) => row.map((col, colIndex) => {\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          color: grid[rowIndex][colIndex] === 1 ? color : 'black'\n        }, `${rowIndex}, ${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 28\n        }, this);\n      })), /*#__PURE__*/_jsxDEV(Preview, {\n        shape: previewShape\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameStats, {\n      level: level,\n      line: line,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(Board, \"stoanRiKVlRJ6zBoR/iVzAW73do=\", false, function () {\n  return [useSelector, useQueue, useGetBlock];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","useRef","Cell","useSelector","Preview","GameStats","useQueue","useGetBlock","jsxDEV","_jsxDEV","Board","_s","initGrid","Array","from","length","fill","grid","setGrid","isStart","store","value","level","setLevel","line","setLine","score","setScore","blockQueue","setBlockQueue","pop","shape","previewShape","console","log","current","newGrid","color","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","rowIndex","col","colIndex","_c","$RefreshReg$"],"sources":["/Users/Pajamas/Project/tetris/src/components/Board.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\nimport { useSelector } from \"react-redux\";\nimport Preview from \"./Preview\";\nimport GameStats from \"./GameStats\";\nimport { useQueue } from \"../hooks/useQueue\";\nimport { useGetBlock } from \"../hooks/useGetBlock\";\n\n\n\nconst Board = () => {\n    const initGrid = Array.from({ length: 20 }, () => new Array(10).fill(0));\n    const [grid, setGrid] = useState(initGrid);\n    const isStart = useSelector((store) => store.isStart.value);\n    // if(!isStart) return; //count down check\n    //아래의 level, line, score는 redux를 사용하는 편이 좋아보임\n    const [level, setLevel] = useState(1);\n    const [line, setLine] = useState(0);\n    const [score, setScore] = useState(0);\n\n    \n    \n    //block queue state\n    const [blockQueue, setBlockQueue, pop] = useQueue();\n    let shape = useRef(null); //현재 조종중인 블럭\n    const previewShape = blockQueue[blockQueue.length-1];\n\n    \n    \n\n\n    useEffect( () => {\n        if(!isStart) return; //count down check\n        console.log('ddd')\n        shape.current = pop();\n    }, [isStart, blockQueue]);\n\n    const [newGrid, color] = useGetBlock(shape, grid, setGrid);\n\n\n\n\n\n\n    return(\n        <div className=\"board\">\n            <h1 className=\"board-title-tetris\">TETRIS</h1>\n            \n            <div className=\"grid\">\n                {grid.map((row, rowIndex) => row.map((col, colIndex) => {\n                    return <Cell \n                        key={`${rowIndex}, ${colIndex}`}\n                        color={grid[rowIndex][colIndex] === 1 ? color : 'black'}\n                    />\n                }))}\n                <Preview shape={previewShape}/>\n            </div>\n            \n            \n            <GameStats \n                level={level}\n                line={line}\n                score={score}\n            />\n        </div>\n    );\n}\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}