{"ast":null,"code":"var _jsxFileName = \"/Users/Pajamas/Project/tetris/src/components/Tetris/Preview.js\",\n  _s = $RefreshSig$();\nimport { styled } from \"styled-components\";\nimport { useEffect } from \"react\";\nimport PreviewCell from \"./PreviewCell\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Preview = _ref => {\n  _s();\n  let {\n    queue\n  } = _ref;\n  const initArr = Array.from({\n    length: 4\n  }, () => new Array(4).fill(0));\n  useEffect(() => {\n    if (queue.isEmpty()) {\n      queue.init();\n    }\n    const shape = queue.items[queue.items.length - 1];\n    console.log(shape);\n  });\n  return /*#__PURE__*/_jsxDEV(StyledPreview, {\n    children: initArr.map((row, y) => row.map((cell, x) => {\n      return /*#__PURE__*/_jsxDEV(PreviewCell, {}, x, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 24\n      }, this);\n    }))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(Preview, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = Preview;\nexport default Preview;\nconst StyledPreview = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(4, 1fr);\n    box-sizing: content-box;\n    background-color: transparent;\n    width: 100px;\n    height: 100px;\n    border: 2px solid #111;\n\n    div {\n        display: inline;\n        width: auto;\n\n        border: 1px solid aliceblue;\n    }\n`;\n\n// import { useState } from \"react\";\n// import Cell from \"./Cell\";\n\n// const Preview = () => {\n//     const initArr = Array.from({ length: 4 }, () => new Array(4).fill(0));\n//     const [grid, setGrid] = useState(initGrid);\n//     return(\n//         <div className=\"preview\">\n//             {grid.map((row, rowIndex) => row.map((col, colIndex) => {\n//                 return <Cell \n//                     key={`${rowIndex}, ${colIndex}`}\n//                     color={grid[rowIndex][colIndex] === 1 ? 'black' : 'rgb(116, 130, 95)'}\n//                 />\n//             }))}\n//         </div>\n//     );\n// }\n// export default Preview;\n_c2 = StyledPreview;\nvar _c, _c2;\n$RefreshReg$(_c, \"Preview\");\n$RefreshReg$(_c2, \"StyledPreview\");","map":{"version":3,"names":["styled","useEffect","PreviewCell","jsxDEV","_jsxDEV","Preview","_ref","_s","queue","initArr","Array","from","length","fill","isEmpty","init","shape","items","console","log","StyledPreview","children","map","row","y","cell","x","fileName","_jsxFileName","lineNumber","columnNumber","_c","div","_c2","$RefreshReg$"],"sources":["/Users/Pajamas/Project/tetris/src/components/Tetris/Preview.js"],"sourcesContent":["import { styled } from \"styled-components\";\n\nimport { useEffect } from \"react\";\n\nimport PreviewCell from \"./PreviewCell\";\n\n\nconst Preview = ({queue}) => {\n    const initArr = Array.from({ length: 4 }, () => new Array(4).fill(0));\n    \n    useEffect(() => {\n        if(queue.isEmpty()) {\n            queue.init();\n        }\n        const shape = queue.items[queue.items.length-1];\n        console.log(shape);\n    })\n    \n    \n    \n    return(\n        <StyledPreview>\n            {initArr.map((row, y) => row.map((cell, x) => {\n                return <PreviewCell key={x}></PreviewCell>\n            }))}\n        </StyledPreview>\n    );\n}\n\nexport default Preview;\n\nconst StyledPreview = styled.div`\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-template-rows: repeat(4, 1fr);\n    box-sizing: content-box;\n    background-color: transparent;\n    width: 100px;\n    height: 100px;\n    border: 2px solid #111;\n\n    div {\n        display: inline;\n        width: auto;\n\n        border: 1px solid aliceblue;\n    }\n`\n\n// import { useState } from \"react\";\n// import Cell from \"./Cell\";\n\n// const Preview = () => {\n//     const initArr = Array.from({ length: 4 }, () => new Array(4).fill(0));\n//     const [grid, setGrid] = useState(initGrid);\n//     return(\n//         <div className=\"preview\">\n//             {grid.map((row, rowIndex) => row.map((col, colIndex) => {\n//                 return <Cell \n//                     key={`${rowIndex}, ${colIndex}`}\n//                     color={grid[rowIndex][colIndex] === 1 ? 'black' : 'rgb(116, 130, 95)'}\n//                 />\n//             }))}\n//         </div>\n//     );\n// }\n// export default Preview;"],"mappings":";;AAAA,SAASA,MAAM,QAAQ,mBAAmB;AAE1C,SAASC,SAAS,QAAQ,OAAO;AAEjC,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGxC,MAAMC,OAAO,GAAGC,IAAA,IAAa;EAAAC,EAAA;EAAA,IAAZ;IAACC;EAAK,CAAC,GAAAF,IAAA;EACpB,MAAMG,OAAO,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAE;EAAE,CAAC,EAAE,MAAM,IAAIF,KAAK,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC,CAAC,CAAC;EAErEZ,SAAS,CAAC,MAAM;IACZ,IAAGO,KAAK,CAACM,OAAO,CAAC,CAAC,EAAE;MAChBN,KAAK,CAACO,IAAI,CAAC,CAAC;IAChB;IACA,MAAMC,KAAK,GAAGR,KAAK,CAACS,KAAK,CAACT,KAAK,CAACS,KAAK,CAACL,MAAM,GAAC,CAAC,CAAC;IAC/CM,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;EACtB,CAAC,CAAC;EAIF,oBACIZ,OAAA,CAACgB,aAAa;IAAAC,QAAA,EACTZ,OAAO,CAACa,GAAG,CAAC,CAACC,GAAG,EAAEC,CAAC,KAAKD,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,EAAEC,CAAC,KAAK;MAC1C,oBAAOtB,OAAA,CAACF,WAAW,MAAMwB,CAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAe,CAAC;IAC9C,CAAC,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACQ,CAAC;AAExB,CAAC;AAAAvB,EAAA,CApBKF,OAAO;AAAA0B,EAAA,GAAP1B,OAAO;AAsBb,eAAeA,OAAO;AAEtB,MAAMe,aAAa,GAAGpB,MAAM,CAACgC,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAAC,GAAA,GAnCMb,aAAa;AAAA,IAAAW,EAAA,EAAAE,GAAA;AAAAC,YAAA,CAAAH,EAAA;AAAAG,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}