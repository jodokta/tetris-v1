{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { checkCollision, createStage } from \"../../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      // 각 줄을 순회하며 특정 라인의 모든 셀이 채워져 있는 경우\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const calculateGhost = (player, stage) => {\n      const ghost = JSON.parse(JSON.stringify(player));\n      while (!checkCollision(ghost, stage, {\n        x: 0,\n        y: 1\n      })) {\n        ghost.pos.y += 1;\n      }\n      ghost.collide = true;\n    };\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n      const ghost = calculateGhost(player, newStage);\n      console.log(ghost);\n\n      //충돌 감지시 새 블럭 생성\n      if (player.collide) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // 블럭 그림\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"names":["useState","useEffect","checkCollision","createStage","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","calculateGhost","ghost","JSON","parse","stringify","x","y","pos","collide","updateStage","prevStage","map","tetromino","forEach","value","console","log"],"sources":["/Users/Pajamas/Project/tetris/src/hooks/tetris/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { checkCollision, createStage } from \"../../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);        \n\n    useEffect( () => {\n        setRowsCleared(0);\n        \n\n        const sweepRows = newStage => \n            newStage.reduce((ack, row) => {\n                // 각 줄을 순회하며 특정 라인의 모든 셀이 채워져 있는 경우\n                if(row.findIndex(cell => cell[0] === 0) ===-1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, []);\n\n        const calculateGhost = (player, stage) => {\n            const ghost = JSON.parse(JSON.stringify(player));\n            while(!checkCollision(ghost, stage, {x: 0, y: 1})) {\n                ghost.pos.y += 1;\n            }\n            ghost.collide = true;\n        };\n\n\n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row => row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\n            \n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n                    }\n                })\n            });\n\n            const ghost = calculateGhost(player, newStage);\n            console.log(ghost);\n            \n            //충돌 감지시 새 블럭 생성\n            if(player.collide) {  \n                resetPlayer() \n                return sweepRows(newStage);\n            }\n            return newStage;\n        }\n\n        // 블럭 그림\n        setStage(prev => updateStage(prev));\n\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}