{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { checkCollision, createStage } from \"../../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  const getGhostPosition = (player, stage, _ref) => {\n    let {\n      x: moveX,\n      y: moveY\n    } = _ref;\n    let ghostY = moveY;\n    let newPosition = {\n      x: player.pos.x + moveX,\n      y: player.pos.y\n    };\n    while (!checkCollision(player, stage, {\n      x: 0,\n      y: ghostY\n    })) {\n      ghostY++;\n      newPosition.y = player.pos.y + ghostY;\n    }\n    return {\n      ...newPosition,\n      y: newPosition.y - 1\n    };\n  };\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      //충돌 감지시 새 블럭 생성\n      if (player.collide) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // 블럭 그림\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"names":["useState","useEffect","checkCollision","createStage","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","getGhostPosition","_ref","x","moveX","y","moveY","ghostY","newPosition","pos","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","value","collide"],"sources":["/Users/Pajamas/Project/tetris/src/hooks/tetris/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { checkCollision, createStage } from \"../../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    const getGhostPosition = (player, stage, { x: moveX, y: moveY }) => {\n        let ghostY = moveY;\n        let newPosition = { x: player.pos.x + moveX, y: player.pos.y };\n        \n        while (!checkCollision(player, stage, { x: 0, y: ghostY })) {\n          ghostY++;\n          newPosition.y = player.pos.y + ghostY;\n        }\n        \n        return { ...newPosition, y: newPosition.y - 1 };\n      };\n      \n\n\n    useEffect( () => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage => \n            newStage.reduce((ack, row) => {\n                if(row.findIndex(cell => cell[0] === 0) ===-1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, []);\n        \n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row => row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\n\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n                        \n                    }\n                })\n            })\n            \n\n            //충돌 감지시 새 블럭 생성\n            if(player.collide) {  \n                resetPlayer() \n                return sweepRows(newStage);\n            }\n            return newStage;\n        }\n\n        // 블럭 그림\n        setStage(prev => updateStage(prev));\n\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}