{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { checkCollision, createStage } from \"../../gameHelpers\";\nimport GameOver from \"../../components/Tetris/GameOver\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  const [ghostPosition, setGhostPosition] = useState({\n    ...player.pos\n  });\n  useEffect(() => {\n    setRowsCleared(0);\n\n    //Ghost \n    const getGhostposition = () => {\n      let tempPos = {\n        ...player.pos\n      };\n      // while (!checkCollision(player, stage, { x: 0, y: 1 })) {\n      //   tempPos.y++;\n      // }\n      return tempPos;\n    };\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      //set Ghost Position\n      setGhostPosition(getGhostposition());\n      console.log(ghostPosition);\n\n      //충돌 감지시 새 블럭 생성\n      if (player.collide) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // 블럭 그림\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared, ghostPosition];\n};\n_s(useStage, \"oSL//F9lRSNTaXg3i9WgBu+4x+E=\");","map":{"version":3,"names":["useState","useEffect","checkCollision","createStage","GameOver","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","ghostPosition","setGhostPosition","pos","getGhostposition","tempPos","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","map","tetromino","forEach","y","value","x","collide","console","log"],"sources":["/Users/Pajamas/Project/tetris/src/hooks/tetris/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { checkCollision, createStage } from \"../../gameHelpers\";\nimport GameOver from \"../../components/Tetris/GameOver\";\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);    \n    const [ghostPosition, setGhostPosition] = useState({...player.pos})\n\n    \n\n    useEffect( () => {\n        setRowsCleared(0);\n\n        //Ghost \n        const getGhostposition = () => {\n            let tempPos = { ...player.pos };\n            // while (!checkCollision(player, stage, { x: 0, y: 1 })) {\n            //   tempPos.y++;\n            // }\n            return tempPos;\n        };\n\n        const sweepRows = newStage => \n            newStage.reduce((ack, row) => {\n                if(row.findIndex(cell => cell[0] === 0) ===-1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, []);\n        \n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row => row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\n\n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n                    }\n                })\n            })\n\n            //set Ghost Position\n            setGhostPosition(getGhostposition());\n            console.log(ghostPosition);\n            \n\n            //충돌 감지시 새 블럭 생성\n            if(player.collide) {  \n                resetPlayer() \n                return sweepRows(newStage);\n            }\n            return newStage;\n        }\n\n        // 블럭 그림\n        setStage(prev => updateStage(prev));\n\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared, ghostPosition];\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,cAAc,EAAEC,WAAW,QAAQ,mBAAmB;AAC/D,OAAOC,QAAQ,MAAM,kCAAkC;AAEvD,OAAO,MAAMC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAACG,WAAW,CAAC,CAAC,CAAC;EACjD,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACa,aAAa,EAAEC,gBAAgB,CAAC,GAAGd,QAAQ,CAAC;IAAC,GAAGM,MAAM,CAACS;EAAG,CAAC,CAAC;EAInEd,SAAS,CAAE,MAAM;IACbW,cAAc,CAAC,CAAC,CAAC;;IAEjB;IACA,MAAMI,gBAAgB,GAAGA,CAAA,KAAM;MAC3B,IAAIC,OAAO,GAAG;QAAE,GAAGX,MAAM,CAACS;MAAI,CAAC;MAC/B;MACA;MACA;MACA,OAAOE,OAAO;IAClB,CAAC;IAED,MAAMC,SAAS,GAAGC,QAAQ,IACtBA,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MAC1B,IAAGA,GAAG,CAACC,SAAS,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAI,CAAC,CAAC,EAAE;QAC3CZ,cAAc,CAACa,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;QAChCJ,GAAG,CAACK,OAAO,CAAC,IAAIC,KAAK,CAACR,QAAQ,CAAC,CAAC,CAAC,CAACS,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7D,OAAOR,GAAG;MACd;MACAA,GAAG,CAACS,IAAI,CAACR,GAAG,CAAC;MACb,OAAOD,GAAG;IACd,CAAC,EAAE,EAAE,CAAC;IAEV,MAAMU,WAAW,GAAGC,SAAS,IAAI;MAC7B,MAAMb,QAAQ,GAAGa,SAAS,CAACC,GAAG,CAACX,GAAG,IAAIA,GAAG,CAACW,GAAG,CAACT,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGA,IAAK,CAAC,CAAC;MAEnGlB,MAAM,CAAC4B,SAAS,CAACC,OAAO,CAAC,CAACb,GAAG,EAAEc,CAAC,KAAK;QACjCd,GAAG,CAACa,OAAO,CAAC,CAACE,KAAK,EAAEC,CAAC,KAAK;UACtB,IAAGD,KAAK,KAAK,CAAC,EAAE;YACZlB,QAAQ,CAACiB,CAAC,GAAG9B,MAAM,CAACS,GAAG,CAACqB,CAAC,CAAC,CAACE,CAAC,GAAGhC,MAAM,CAACS,GAAG,CAACuB,CAAC,CAAC,GAAG,CAACD,KAAK,EAAG,GAAE/B,MAAM,CAACiC,OAAO,GAAG,QAAQ,GAAG,OAAQ,EAAC,CAAC;UACpG;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;;MAEF;MACAzB,gBAAgB,CAACE,gBAAgB,CAAC,CAAC,CAAC;MACpCwB,OAAO,CAACC,GAAG,CAAC5B,aAAa,CAAC;;MAG1B;MACA,IAAGP,MAAM,CAACiC,OAAO,EAAE;QACfhC,WAAW,CAAC,CAAC;QACb,OAAOW,SAAS,CAACC,QAAQ,CAAC;MAC9B;MACA,OAAOA,QAAQ;IACnB,CAAC;;IAED;IACAT,QAAQ,CAACe,IAAI,IAAIM,WAAW,CAACN,IAAI,CAAC,CAAC;EAEvC,CAAC,EAAE,CAACnB,MAAM,EAAEC,WAAW,CAAC,CAAC;EAEzB,OAAO,CAACE,KAAK,EAAEC,QAAQ,EAAEC,WAAW,EAAEE,aAAa,CAAC;AACxD,CAAC;AAAAL,EAAA,CA5DYH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}