{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { checkCollision, createStage } from \"../../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  const [ghostPosition, setGhostPosition] = useState({\n    ...player.pos\n  });\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      // 각 줄을 순회하며 특정 라인의 모든 셀이 채워져 있는 경우\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const ghost = JSON.parse(JSON.stringify(player));\n    console.log(ghost.pos.y);\n    ghost.pos.y++;\n    console.log(ghost.pos.y);\n    const calculateGhostPosition = () => {\n      while (!checkCollision(ghost, stage, {\n        x: 0,\n        y: 1\n      })) {\n        console.log('increase...y');\n        ghost.pos.y++;\n      }\n      console.log('result: ', ghost.pos.y);\n    };\n    // calculateGhostPosition();\n\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      //충돌 감지시 새 블럭 생성\n      if (player.collide) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // 블럭 그림\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};\n_s(useStage, \"oSL//F9lRSNTaXg3i9WgBu+4x+E=\");","map":{"version":3,"names":["useState","useEffect","checkCollision","createStage","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","ghostPosition","setGhostPosition","pos","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","ghost","JSON","parse","stringify","console","log","y","calculateGhostPosition","x","updateStage","prevStage","map","tetromino","forEach","value","collide"],"sources":["/Users/Pajamas/Project/tetris/src/hooks/tetris/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { checkCollision, createStage } from \"../../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);    \n    const [ghostPosition, setGhostPosition] = useState({...player.pos})\n\n    \n\n    useEffect( () => {\n        setRowsCleared(0);\n        \n\n        const sweepRows = newStage => \n            newStage.reduce((ack, row) => {\n                // 각 줄을 순회하며 특정 라인의 모든 셀이 채워져 있는 경우\n                if(row.findIndex(cell => cell[0] === 0) ===-1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, []);\n\n        const ghost = JSON.parse(JSON.stringify(player));\n        console.log(ghost.pos.y);\n        ghost.pos.y++;\n        console.log(ghost.pos.y);\n\n        const calculateGhostPosition = () => {\n\n            while(!checkCollision(ghost, stage, {x: 0, y: 1})) {\n                console.log('increase...y')\n                ghost.pos.y++;\n            }\n            console.log('result: ',ghost.pos.y);\n            \n        }\n        // calculateGhostPosition();\n\n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row => row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\n            \n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n                    }\n                })\n            })\n            \n            //충돌 감지시 새 블럭 생성\n            if(player.collide) {  \n                resetPlayer() \n                return sweepRows(newStage);\n            }\n            return newStage;\n        }\n\n        // 블럭 그림\n        setStage(prev => updateStage(prev));\n\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}