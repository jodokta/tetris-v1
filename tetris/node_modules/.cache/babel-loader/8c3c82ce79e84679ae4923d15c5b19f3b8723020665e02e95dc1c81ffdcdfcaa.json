{"ast":null,"code":"var _jsxFileName = \"/Users/Pajamas/Project/tetris/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useRef } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\nimport Preview from \"./Preview\";\nimport GameStats from \"./GameStats\";\nimport { useQueue } from \"../hooks/useQueue\";\nimport { useGetBlock } from \"../hooks/useGetBlock\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const initGrid = Array.from({\n    length: 20\n  }, () => new Array(10).fill(0));\n  const [grid, setGrid] = useState(initGrid);\n\n  // if(!isStart) return; //count down check\n  //아래의 level, line, score는 redux를 사용하는 편이 좋아보임\n  const [level, setLevel] = useState(1);\n  const [line, setLine] = useState(0);\n  const [score, setScore] = useState(0);\n  let shape = useRef(null); //현재 조종중인 블럭\n  const previewShape = useRef(null); //다음 블럭\n  const [blockQueue, setBlockQueue, pop] = useQueue();\n  useEffect(() => {\n    // shape.current = pop();\n    // previewShape.current = blockQueue[0];\n  }, [isStart, blockQueue, shape, previewShape, pop]);\n  const [newGrid, color] = useGetBlock(shape, grid, setGrid);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"board-title-tetris\",\n      children: \"TETRIS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: [grid.map((row, rowIndex) => row.map((col, colIndex) => {\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          color: grid[rowIndex][colIndex] === 1 ? color : 'black'\n        }, `${rowIndex}, ${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 28\n        }, this);\n      })), /*#__PURE__*/_jsxDEV(Preview, {\n        shape: previewShape.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameStats, {\n      level: level,\n      line: line,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n_s(Board, \"vIxcqQmMVBjd1fSnWwDdUidNO+A=\", false, function () {\n  return [useQueue, useGetBlock];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","useRef","Cell","Preview","GameStats","useQueue","useGetBlock","jsxDEV","_jsxDEV","Board","_s","initGrid","Array","from","length","fill","grid","setGrid","level","setLevel","line","setLine","score","setScore","shape","previewShape","blockQueue","setBlockQueue","pop","isStart","newGrid","color","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","rowIndex","col","colIndex","current","_c","$RefreshReg$"],"sources":["/Users/Pajamas/Project/tetris/src/components/Board.js"],"sourcesContent":["import { useEffect, useState, useRef } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\n\nimport Preview from \"./Preview\";\nimport GameStats from \"./GameStats\";\nimport { useQueue } from \"../hooks/useQueue\";\nimport { useGetBlock } from \"../hooks/useGetBlock\";\n\n\n\nconst Board = () => {\n    const initGrid = Array.from({ length: 20 }, () => new Array(10).fill(0));\n    const [grid, setGrid] = useState(initGrid);\n\n    // if(!isStart) return; //count down check\n    //아래의 level, line, score는 redux를 사용하는 편이 좋아보임\n    const [level, setLevel] = useState(1);\n    const [line, setLine] = useState(0);\n    const [score, setScore] = useState(0);\n\n    \n    let shape = useRef(null); //현재 조종중인 블럭\n    const previewShape = useRef(null); //다음 블럭\n    const [blockQueue, setBlockQueue, pop] = useQueue();\n\n    \n    \n\n\n    useEffect( () => {\n        // shape.current = pop();\n        // previewShape.current = blockQueue[0];\n    }, [isStart, blockQueue, shape, previewShape, pop]);\n\n    const [newGrid, color] = useGetBlock(shape, grid, setGrid);\n    \n\n\n\n\n\n\n    return(\n        <div className=\"board\">\n            <h1 className=\"board-title-tetris\">TETRIS</h1>\n            \n            <div className=\"grid\">\n                {grid.map((row, rowIndex) => row.map((col, colIndex) => {\n                    return <Cell \n                        key={`${rowIndex}, ${colIndex}`}\n                        color={grid[rowIndex][colIndex] === 1 ? color : 'black'}\n                    />\n                }))}\n                <Preview shape={previewShape.current}/>\n            </div>\n            \n            \n            <GameStats \n                level={level}\n                line={line}\n                score={score}\n            />\n        </div>\n    );\n}\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}