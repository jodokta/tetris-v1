{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { checkCollision, createStage } from \"../../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  const [ghostPos, setGhostPos] = useState({\n    x: 0,\n    y: 0\n  });\n  const calculateGhostPos = stage => {\n    const ghostPos = [];\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    while (!checkCollision(clonedPlayer, stage, {\n      x: 0,\n      y: 1\n    })) {\n      clonedPlayer.pos.y += 1;\n    }\n    const calculatedPos = {\n      ...clonedPlayer.pos\n    };\n    clonedPlayer.tetromino.forEach((row, y) => {\n      row.forEach((value, x) => {\n        if (value !== 0) {\n          ghostPos.push({\n            x: y + calculateGhostPos.y,\n            y: x + calculateGhostPos.x\n          });\n        }\n      });\n    });\n    return calculatedPos;\n  };\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      // Ghost Position \n      setGhostPos(calculateGhostPos(prevStage));\n\n      //충돌 감지시 새 블럭 생성\n      if (player.collide) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Update Block Position as Stage State\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer, calculateGhostPos]);\n  return [stage, setStage, rowsCleared, ghostPos];\n};\n_s(useStage, \"6Ptcyp5FtEUFZeNlaJD5JQzqiUU=\");","map":{"version":3,"names":["useState","useEffect","checkCollision","createStage","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","ghostPos","setGhostPos","x","y","calculateGhostPos","clonedPlayer","JSON","parse","stringify","pos","calculatedPos","tetromino","forEach","row","value","push","sweepRows","newStage","reduce","ack","findIndex","cell","prev","unshift","Array","length","fill","updateStage","prevStage","map","collide"],"sources":["/Users/Pajamas/Project/tetris/src/hooks/tetris/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { checkCollision, createStage } from \"../../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);    \n    const [ghostPos, setGhostPos] = useState({x: 0, y: 0});\n\n    const calculateGhostPos = (stage) => {\n        const ghostPos = [];\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        \n        while(!checkCollision(clonedPlayer, stage, {x: 0, y: 1})) {\n            clonedPlayer.pos.y += 1;\n        }\n        const calculatedPos = {...clonedPlayer.pos};\n\n        clonedPlayer.tetromino.forEach((row, y) => {\n            row.forEach((value, x) => {\n                if(value !== 0) {\n                    ghostPos.push({x: y + calculateGhostPos.y, y: x + calculateGhostPos.x});\n                }\n            })\n        })            \n\n        return calculatedPos;\n    }\n\n\n    useEffect( () => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage => \n            newStage.reduce((ack, row) => {\n                if(row.findIndex(cell => cell[0] === 0) ===-1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, []);\n\n        \n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row => row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\n            \n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n                    }\n                })\n            });\n\n            // Ghost Position \n            setGhostPos(calculateGhostPos(prevStage));\n            \n            //충돌 감지시 새 블럭 생성\n            if(player.collide) {  \n                resetPlayer() \n                return sweepRows(newStage);\n            }\n            return newStage;\n        }\n        \n        // Update Block Position as Stage State\n        setStage(prev => updateStage(prev));\n\n    }, [player, resetPlayer, calculateGhostPos]);\n\n    return [stage, setStage, rowsCleared, ghostPos];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}