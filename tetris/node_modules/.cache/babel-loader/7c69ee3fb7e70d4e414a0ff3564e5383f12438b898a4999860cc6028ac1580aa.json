{"ast":null,"code":"var _jsxFileName = \"/Users/Pajamas/Project/tetris/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\nimport { useSelector } from \"react-redux\";\nimport Preview from \"./Preview\";\nimport GameStats from \"./GameStats\";\nimport { TETROMINOES } from \"../constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const initGrid = Array.from({\n    length: 20\n  }, () => new Array(10).fill(0));\n  const [grid, setGrid] = useState(initGrid);\n  const isStart = useSelector(store => store.isStart.value);\n  //아래의 level, line, score는 redux를 사용하는 편이 좋아보임\n  const [level, setLevel] = useState(1);\n  const [line, setLine] = useState(0);\n  const [score, setScore] = useState(0);\n\n  //initQueue\n  const initQueue = () => {\n    return [...TETROMINOES];\n  };\n  //block queue state\n  //queue를 pop()할 때 복사한 값으로 pop()하고 그 남은 값을 setBlockQueue에 전달해 setter가 재 할당 가능하게 함.\n  const [blockQueue, setBlockQueue] = useState([]);\n  //grid current Block(shape)\n  const [block, setBlock] = useState([]);\n  //Preview props(shape)\n  const [previewShape, setPreviewShape] = useState([]);\n  useEffect(() => {\n    //카운트 다운 끝나면 true\n    if (isStart) {}\n  }, [isStart]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"board-title-tetris\",\n      children: \"TETRIS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: [grid.map((row, rowIndex) => row.map((col, colIndex) => {\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          color: grid[rowIndex][colIndex] === 1 ? 'black' : 'rgb(116, 130, 95)'\n        }, `${rowIndex}, ${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 28\n        }, this);\n      })), /*#__PURE__*/_jsxDEV(Preview, {\n        shape: previewShape\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameStats, {\n      level: level,\n      line: line,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n_s(Board, \"lQOgAhQmy7hRpVjUGAW0zZOuYwE=\", false, function () {\n  return [useSelector];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useEffect","useState","Cell","useSelector","Preview","GameStats","TETROMINOES","jsxDEV","_jsxDEV","Board","_s","initGrid","Array","from","length","fill","grid","setGrid","isStart","store","value","level","setLevel","line","setLine","score","setScore","initQueue","blockQueue","setBlockQueue","block","setBlock","previewShape","setPreviewShape","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","rowIndex","col","colIndex","color","shape","_c","$RefreshReg$"],"sources":["/Users/Pajamas/Project/tetris/src/components/Board.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\nimport { useSelector } from \"react-redux\";\nimport Preview from \"./Preview\";\nimport GameStats from \"./GameStats\";\nimport { TETROMINOES } from \"../constants\";\n\n\nconst Board = () => {\n    const initGrid = Array.from({ length: 20 }, () => new Array(10).fill(0));\n    const [grid, setGrid] = useState(initGrid);\n    const isStart = useSelector((store) => store.isStart.value);\n    //아래의 level, line, score는 redux를 사용하는 편이 좋아보임\n    const [level, setLevel] = useState(1);\n    const [line, setLine] = useState(0);\n    const [score, setScore] = useState(0);\n\n    //initQueue\n    const initQueue = () => {\n        return [...TETROMINOES];\n    }\n    //block queue state\n    //queue를 pop()할 때 복사한 값으로 pop()하고 그 남은 값을 setBlockQueue에 전달해 setter가 재 할당 가능하게 함.\n    const [blockQueue, setBlockQueue] = useState([]);\n    //grid current Block(shape)\n    const [block, setBlock] = useState([]);\n    //Preview props(shape)\n    const [previewShape, setPreviewShape] = useState([]);\n    \n    useEffect( () => {\n        //카운트 다운 끝나면 true\n        if(isStart) {\n            \n        }\n    }, [isStart])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    return(\n        <div className=\"board\">\n            <h1 className=\"board-title-tetris\">TETRIS</h1>\n            \n            <div className=\"grid\">\n                {grid.map((row, rowIndex) => row.map((col, colIndex) => {\n                    return <Cell \n                        key={`${rowIndex}, ${colIndex}`}\n                        color={grid[rowIndex][colIndex] === 1 ? 'black' : 'rgb(116, 130, 95)'}\n                    />\n                }))}\n                <Preview shape={previewShape}/>\n            </div>\n            \n            \n            <GameStats \n                level={level}\n                line={line}\n                score={score}\n            />\n        </div>\n    );\n}\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}