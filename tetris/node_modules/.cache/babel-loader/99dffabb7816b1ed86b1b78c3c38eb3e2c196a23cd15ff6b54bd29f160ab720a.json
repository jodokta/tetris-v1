{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { checkCollision, createStage } from \"../../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n    const calculateGhost = stage => {\n      // get player's position then iterate each cell, calculate the max pos.y\n      const clonedPlayer = JSON.parse(JSON.stringify(player));\n      const temp = [];\n      // clonedPlayer\n      clonedPlayer.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            while (!checkCollision(clonedPlayer, stage, {\n              x: 0,\n              y: 1\n            })) {\n              clonedPlayer.pos.y += 1;\n            }\n            temp.push(clonedPlayer.pos.y);\n          }\n        });\n      });\n    };\n    calculateGhost(stage);\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      //충돌 감지시 새 블럭 생성\n      if (player.collide) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // 블럭 그림\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"names":["useState","useEffect","checkCollision","createStage","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","calculateGhost","clonedPlayer","JSON","parse","stringify","temp","tetromino","forEach","row","y","value","x","pos","push","sweepRows","newStage","reduce","ack","findIndex","cell","prev","unshift","Array","length","fill","updateStage","prevStage","map","collide"],"sources":["/Users/Pajamas/Project/tetris/src/hooks/tetris/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { checkCollision, createStage } from \"../../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);     \n   \n\n    useEffect( () => {\n        setRowsCleared(0);\n        \n        const calculateGhost = (stage) => {\n            // get player's position then iterate each cell, calculate the max pos.y\n            const clonedPlayer = JSON.parse(JSON.stringify(player));\n            const temp = [];\n            // clonedPlayer\n            clonedPlayer.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        while(!checkCollision(clonedPlayer, stage, {x: 0, y: 1})) {\n                            clonedPlayer.pos.y += 1;\n                        }\n                        temp.push(clonedPlayer.pos.y);\n                    }\n                })\n            })\n        }\n        calculateGhost(stage);\n\n        const sweepRows = newStage => \n            newStage.reduce((ack, row) => {\n                if(row.findIndex(cell => cell[0] === 0) ===-1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, []);\n\n\n\n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row => row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\n            \n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n                    }\n                })\n            });\n\n            \n            //충돌 감지시 새 블럭 생성\n            if(player.collide) {  \n                resetPlayer() \n                return sweepRows(newStage);\n            }\n            return newStage;\n        }\n        \n        // 블럭 그림\n        setStage(prev => updateStage(prev));\n\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}