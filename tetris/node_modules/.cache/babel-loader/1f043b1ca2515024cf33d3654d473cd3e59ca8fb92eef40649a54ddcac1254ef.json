{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { checkCollision, createStage } from \"../../gameHelpers\";\nexport const useStage = (player, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  const [ghostPos, setGhostPos] = useState({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    setRowsCleared(0);\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const calculateGhostPos = stage => {\n      const ghostPos = [];\n      const clonedPlayer = JSON.parse(JSON.stringify(player));\n      while (!checkCollision(clonedPlayer, stage, {\n        x: 0,\n        y: 1\n      })) {\n        clonedPlayer.pos.y += 1;\n      }\n      const calculatedPos = {\n        ...clonedPlayer.pos\n      };\n      clonedPlayer.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            ghostPos.push({\n              x: x + calculatedPos.x,\n              y: y + calculatedPos.y\n            });\n          }\n        });\n      });\n      return ghostPos;\n    };\n    // Ghost Position \n    setGhostPos(calculateGhostPos(stage));\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      //충돌 감지시 새 블럭 생성\n      if (player.collide) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // Update Block Position as Stage State\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n  return [stage, setStage, rowsCleared, ghostPos];\n};\n_s(useStage, \"6Ptcyp5FtEUFZeNlaJD5JQzqiUU=\");","map":{"version":3,"names":["useState","useEffect","checkCollision","createStage","useStage","player","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","ghostPos","setGhostPos","x","y","sweepRows","newStage","reduce","ack","row","findIndex","cell","prev","unshift","Array","length","fill","push","calculateGhostPos","clonedPlayer","JSON","parse","stringify","pos","calculatedPos","tetromino","forEach","value","updateStage","prevStage","map","collide"],"sources":["/Users/Pajamas/Project/tetris/src/hooks/tetris/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { checkCollision, createStage } from \"../../gameHelpers\";\n\nexport const useStage = (player, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);    \n    const [ghostPos, setGhostPos] = useState({x: 0, y: 0});\n\n    \n\n\n    useEffect( () => {\n        setRowsCleared(0);\n\n        const sweepRows = newStage => \n            newStage.reduce((ack, row) => {\n                if(row.findIndex(cell => cell[0] === 0) ===-1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, []);\n\n        const calculateGhostPos = (stage) => {\n            const ghostPos = [];\n            const clonedPlayer = JSON.parse(JSON.stringify(player));\n            \n            while(!checkCollision(clonedPlayer, stage, {x: 0, y: 1})) {\n                clonedPlayer.pos.y += 1;\n            }\n            const calculatedPos = {...clonedPlayer.pos};\n    \n            clonedPlayer.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        ghostPos.push({x: x + calculatedPos.x, y: y + calculatedPos.y});\n                    }\n                })\n            })            \n    \n            return ghostPos;\n        }\n        // Ghost Position \n        setGhostPos(calculateGhostPos(stage));\n\n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row => row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\n            \n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n                    }\n                })\n            });\n            \n            //충돌 감지시 새 블럭 생성\n            if(player.collide) {  \n                resetPlayer() \n                return sweepRows(newStage);\n            }\n            return newStage;\n        }\n        \n        // Update Block Position as Stage State\n        setStage(prev => updateStage(prev));\n\n    }, [player, resetPlayer]);\n\n    return [stage, setStage, rowsCleared, ghostPos];\n}"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,SAASC,cAAc,EAAEC,WAAW,QAAQ,mBAAmB;AAE/D,OAAO,MAAMC,QAAQ,GAAGA,CAACC,MAAM,EAAEC,WAAW,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAACG,WAAW,CAAC,CAAC,CAAC;EACjD,MAAM,CAACO,WAAW,EAAEC,cAAc,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC;IAACc,CAAC,EAAE,CAAC;IAAEC,CAAC,EAAE;EAAC,CAAC,CAAC;EAKtDd,SAAS,CAAE,MAAM;IACbU,cAAc,CAAC,CAAC,CAAC;IAEjB,MAAMK,SAAS,GAAGC,QAAQ,IACtBA,QAAQ,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,GAAG,KAAK;MAC1B,IAAGA,GAAG,CAACC,SAAS,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,KAAI,CAAC,CAAC,EAAE;QAC3CX,cAAc,CAACY,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;QAChCJ,GAAG,CAACK,OAAO,CAAC,IAAIC,KAAK,CAACR,QAAQ,CAAC,CAAC,CAAC,CAACS,MAAM,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC;QAC7D,OAAOR,GAAG;MACd;MACAA,GAAG,CAACS,IAAI,CAACR,GAAG,CAAC;MACb,OAAOD,GAAG;IACd,CAAC,EAAE,EAAE,CAAC;IAEV,MAAMU,iBAAiB,GAAIrB,KAAK,IAAK;MACjC,MAAMI,QAAQ,GAAG,EAAE;MACnB,MAAMkB,YAAY,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,SAAS,CAAC5B,MAAM,CAAC,CAAC;MAEvD,OAAM,CAACH,cAAc,CAAC4B,YAAY,EAAEtB,KAAK,EAAE;QAACM,CAAC,EAAE,CAAC;QAAEC,CAAC,EAAE;MAAC,CAAC,CAAC,EAAE;QACtDe,YAAY,CAACI,GAAG,CAACnB,CAAC,IAAI,CAAC;MAC3B;MACA,MAAMoB,aAAa,GAAG;QAAC,GAAGL,YAAY,CAACI;MAAG,CAAC;MAE3CJ,YAAY,CAACM,SAAS,CAACC,OAAO,CAAC,CAACjB,GAAG,EAAEL,CAAC,KAAK;QACvCK,GAAG,CAACiB,OAAO,CAAC,CAACC,KAAK,EAAExB,CAAC,KAAK;UACtB,IAAGwB,KAAK,KAAK,CAAC,EAAE;YACZ1B,QAAQ,CAACgB,IAAI,CAAC;cAACd,CAAC,EAAEA,CAAC,GAAGqB,aAAa,CAACrB,CAAC;cAAEC,CAAC,EAAEA,CAAC,GAAGoB,aAAa,CAACpB;YAAC,CAAC,CAAC;UACnE;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;MAEF,OAAOH,QAAQ;IACnB,CAAC;IACD;IACAC,WAAW,CAACgB,iBAAiB,CAACrB,KAAK,CAAC,CAAC;IAErC,MAAM+B,WAAW,GAAGC,SAAS,IAAI;MAC7B,MAAMvB,QAAQ,GAAGuB,SAAS,CAACC,GAAG,CAACrB,GAAG,IAAIA,GAAG,CAACqB,GAAG,CAACnB,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,KAAK,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,GAAGA,IAAK,CAAC,CAAC;MAEnGjB,MAAM,CAAC+B,SAAS,CAACC,OAAO,CAAC,CAACjB,GAAG,EAAEL,CAAC,KAAK;QACjCK,GAAG,CAACiB,OAAO,CAAC,CAACC,KAAK,EAAExB,CAAC,KAAK;UACtB,IAAGwB,KAAK,KAAK,CAAC,EAAE;YACZrB,QAAQ,CAACF,CAAC,GAAGV,MAAM,CAAC6B,GAAG,CAACnB,CAAC,CAAC,CAACD,CAAC,GAAGT,MAAM,CAAC6B,GAAG,CAACpB,CAAC,CAAC,GAAG,CAACwB,KAAK,EAAG,GAAEjC,MAAM,CAACqC,OAAO,GAAG,QAAQ,GAAG,OAAQ,EAAC,CAAC;UACpG;QACJ,CAAC,CAAC;MACN,CAAC,CAAC;;MAEF;MACA,IAAGrC,MAAM,CAACqC,OAAO,EAAE;QACfpC,WAAW,CAAC,CAAC;QACb,OAAOU,SAAS,CAACC,QAAQ,CAAC;MAC9B;MACA,OAAOA,QAAQ;IACnB,CAAC;;IAED;IACAR,QAAQ,CAACc,IAAI,IAAIgB,WAAW,CAAChB,IAAI,CAAC,CAAC;EAEvC,CAAC,EAAE,CAAClB,MAAM,EAAEC,WAAW,CAAC,CAAC;EAEzB,OAAO,CAACE,KAAK,EAAEC,QAAQ,EAAEC,WAAW,EAAEE,QAAQ,CAAC;AACnD,CAAC;AAAAL,EAAA,CArEYH,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}