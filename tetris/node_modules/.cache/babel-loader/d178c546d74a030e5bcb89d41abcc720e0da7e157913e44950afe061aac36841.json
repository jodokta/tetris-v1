{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport { createStage, checkCollision } from \"../../gameHelpers\";\nexport const useStage = (player, setPlayer, resetPlayer) => {\n  _s();\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n  useEffect(() => {\n    setRowsCleared(0);\n    const calculateGhost = stage => {\n      const clonedPlayer = JSON.parse(JSON.stringify(player));\n      while (true) {\n        if (clonedPlayer.pos.y < 20) {\n          console.log(stage[clonedPlayer.pos.y][clonedPlayer.pos.x][0] === [0, 'clear']);\n          // if(stage[clonedPlayer.pos.y][clonedPlayer.pos.x][0] === [0, 'clear']) { //bug\n          //     clonedPlayer.pos.y += 1;\n          // } else {\n          //     break;\n          // }\n          break;\n        }\n      }\n      clonedPlayer.pos.y--;\n      clonedPlayer.ghost = clonedPlayer.tetromino.map((row, y) => row.map((value, x) => value !== 0 ? 'G' : 0));\n      setPlayer(clonedPlayer);\n    };\n    const sweepRows = newStage => newStage.reduce((ack, row) => {\n      // 각 줄을 순회하며 특정 라인의 모든 셀이 채워져 있는 경우\n      if (row.findIndex(cell => cell[0] === 0) === -1) {\n        setRowsCleared(prev => prev + 1);\n        ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n        return ack;\n      }\n      ack.push(row);\n      return ack;\n    }, []);\n    const updateStage = prevStage => {\n      const newStage = prevStage.map(row => row.map(cell => cell[1] === 'clear' ? [0, 'clear'] : cell));\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n          }\n        });\n      });\n\n      // Ghost set\n      calculateGhost(prevStage);\n\n      //충돌 감지시 새 블럭 생성\n      if (player.collide) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    // 블럭 그림\n    setStage(prev => updateStage(prev));\n  }, [player, setPlayer, resetPlayer]);\n  return [stage, setStage, rowsCleared];\n};\n_s(useStage, \"kMQgahRXXeXYpK/xfwjy5Z7lEYg=\");","map":{"version":3,"names":["useState","useEffect","createStage","checkCollision","useStage","player","setPlayer","resetPlayer","_s","stage","setStage","rowsCleared","setRowsCleared","calculateGhost","clonedPlayer","JSON","parse","stringify","pos","y","console","log","x","ghost","tetromino","map","row","value","sweepRows","newStage","reduce","ack","findIndex","cell","prev","unshift","Array","length","fill","push","updateStage","prevStage","forEach","collide"],"sources":["/Users/Pajamas/Project/tetris/src/hooks/tetris/useStage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\n\nimport { createStage, checkCollision } from \"../../gameHelpers\";\n\nexport const useStage = (player, setPlayer, resetPlayer) => {\n    const [stage, setStage] = useState(createStage());\n    const [rowsCleared, setRowsCleared] = useState(0);     \n   \n\n    useEffect( () => {\n        setRowsCleared(0);\n        \n        const calculateGhost = (stage) => {\n            \n            const clonedPlayer = JSON.parse(JSON.stringify(player));\n\n            while(true) {\n                if(clonedPlayer.pos.y < 20) {\n                    console.log(stage[clonedPlayer.pos.y][clonedPlayer.pos.x][0] === [0, 'clear'])\n                    // if(stage[clonedPlayer.pos.y][clonedPlayer.pos.x][0] === [0, 'clear']) { //bug\n                    //     clonedPlayer.pos.y += 1;\n                    // } else {\n                    //     break;\n                    // }\n                    break;\n                }\n            }\n            clonedPlayer.pos.y--;\n            clonedPlayer.ghost = clonedPlayer.tetromino.map((row, y) =>\n                row.map((value, x) => (value !== 0 ? 'G' : 0))\n            );\n            setPlayer(clonedPlayer);           \n        }\n\n        const sweepRows = newStage => \n            newStage.reduce((ack, row) => {\n                // 각 줄을 순회하며 특정 라인의 모든 셀이 채워져 있는 경우\n                if(row.findIndex(cell => cell[0] === 0) ===-1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, []);\n\n\n\n        const updateStage = prevStage => {\n            const newStage = prevStage.map(row => row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)));\n            \n            player.tetromino.forEach((row, y) => {\n                row.forEach((value, x) => {\n                    if(value !== 0) {\n                        newStage[y + player.pos.y][x + player.pos.x] = [value, `${player.collide ? 'merged' : 'clear'}`];\n                    }\n                })\n            });\n\n            // Ghost set\n            calculateGhost(prevStage);\n\n            \n            //충돌 감지시 새 블럭 생성\n            if(player.collide) {  \n                resetPlayer() \n                return sweepRows(newStage);\n            }\n            return newStage;\n        }\n        \n        // 블럭 그림\n        setStage(prev => updateStage(prev));\n\n    }, [player, setPlayer, resetPlayer]);\n\n    return [stage, setStage, rowsCleared];\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}