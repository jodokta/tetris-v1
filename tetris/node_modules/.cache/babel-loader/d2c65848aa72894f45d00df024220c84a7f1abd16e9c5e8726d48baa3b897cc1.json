{"ast":null,"code":"var _jsxFileName = \"/Users/Pajamas/Project/tetris/src/components/Board.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\nimport Preview from \"./Preview\";\nimport GameStats from \"./GameStats\";\nimport { initQueue } from \"../utill.js/initQueue\";\nimport { useSelector } from \"react-redux\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Board = () => {\n  _s();\n  const isStart = useSelector(store => store.isStart.value);\n  const initGrid = Array.from({\n    length: 20\n  }, () => new Array(10).fill(0));\n  const [grid, setGrid] = useState(initGrid);\n\n  //아래의 level, line, score는 redux를 사용하는 편이 좋아보임\n  const [level, setLevel] = useState(1);\n  const [line, setLine] = useState(0);\n  const [score, setScore] = useState(0);\n  const [blockQueue, setBlockQueue] = useState(() => initQueue());\n  const shape = useState(blockQueue.pop()); //현재 조종중인 블럭\n  const previewShape = useState(blockQueue[blockQueue.length - 1]); //다음 블럭\n\n  const pop = () => {\n    if (blockQueue.length === 1) {\n      const x = blockQueue.pop();\n      setBlockQueue(initQueue());\n      return x;\n    } else {\n      return blockQueue.pop();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"board-title-tetris\",\n      children: \"TETRIS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      children: [grid.map((row, rowIndex) => row.map((col, colIndex) => {\n        return /*#__PURE__*/_jsxDEV(Cell, {\n          color: grid[rowIndex][colIndex] === 1 ? color : 'black'\n        }, `${rowIndex}, ${colIndex}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 28\n        }, this);\n      })), /*#__PURE__*/_jsxDEV(Preview, {\n        shape: previewShape.current\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(GameStats, {\n      level: level,\n      line: line,\n      score: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(Board, \"klaq0ys7lNtkD7r7RkZeqHIw1wY=\", false, function () {\n  return [useSelector];\n});\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["useState","useEffect","Cell","Preview","GameStats","initQueue","useSelector","jsxDEV","_jsxDEV","Board","_s","isStart","store","value","initGrid","Array","from","length","fill","grid","setGrid","level","setLevel","line","setLine","score","setScore","blockQueue","setBlockQueue","shape","pop","previewShape","x","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","row","rowIndex","col","colIndex","color","current","_c","$RefreshReg$"],"sources":["/Users/Pajamas/Project/tetris/src/components/Board.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport Cell from \"./Cell\";\nimport \"../css/Board.css\";\nimport Preview from \"./Preview\";\nimport GameStats from \"./GameStats\";\nimport { initQueue } from \"../utill.js/initQueue\";\nimport { useSelector } from \"react-redux\";\n\n\n\nconst Board = () => {\n    const isStart = useSelector((store) => store.isStart.value);\n\n    const initGrid = Array.from({ length: 20 }, () => new Array(10).fill(0));\n    const [grid, setGrid] = useState(initGrid);\n\n    //아래의 level, line, score는 redux를 사용하는 편이 좋아보임\n    const [level, setLevel] = useState(1);\n    const [line, setLine] = useState(0);\n    const [score, setScore] = useState(0);\n    \n    const [blockQueue, setBlockQueue] = useState(() => initQueue());\n    const shape = useState(blockQueue.pop()); //현재 조종중인 블럭\n    const previewShape = useState(blockQueue[blockQueue.length-1]); //다음 블럭\n    \n    \n    \n    const pop = () => {\n        if(blockQueue.length === 1) {\n            const x = blockQueue.pop();\n            setBlockQueue(initQueue());\n            return x;\n        } else {\n            return blockQueue.pop();\n        }\n    }\n    \n    \n\n    return(\n        <div className=\"board\">\n\n            <h1 className=\"board-title-tetris\">TETRIS</h1>\n            \n            <div className=\"grid\">\n                {grid.map((row, rowIndex) => row.map((col, colIndex) => {\n                    return <Cell \n                        key={`${rowIndex}, ${colIndex}`}\n                        color={grid[rowIndex][colIndex] === 1 ? color : 'black'}\n                    />\n                }))}\n                <Preview shape={previewShape.current}/>\n            </div>\n            \n            \n            <GameStats \n                level={level}\n                line={line}\n                score={score}\n            />\n\n        </div>\n    );\n}\nexport default Board;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}